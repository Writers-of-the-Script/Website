<div
    class="fixed z-10 w-full h-full bg-[rgba(0,0,0,0.5)] hidden items-center justify-center flex-col top-0"
    id="unsafe-outer"
>
    <div
        class="w-[90%] md:w-3xl h-md bg-dark-4 font-jbm p-4 overflow-scroll lg:overflow-unset text-white"
        id="unsafe-container"
    >
        <p class="text-yellow text-lg font-bold">
            WARNING: Potentially Unsafe Version
        </p>

        <div
            id="unsafe"
            class="mt-4 markdown overflow-scroll lg:overflow-unset w-full"
        >
            The file you are about to download is
            <span class="color-red font-bold">potentially unsafe</span>.
            <br /><br />
            It may contain features that
            <span class="color-blue font-bold">shut down your PC</span>,
            <span class="color-green font-bold"
                >create files on your desktop</span
            >,
            <span class="color-orange font-bold"
                >spawn PowerShell processes</span
            >, or other things.
            <br /><br />
            Are you <span class="color-red font-bold">absolutely sure</span> you
            want to continue?
        </div>

        <div class="mt-6 space-x-2 flex flex-row items-center justify-start">
            <button
                id="unsafe-no"
                class="p-2 px-3 bg-red-8 text-lg hover:bg-red-6 transition-all"
                >No</button
            >
            <button
                id="unsafe-yes"
                class="p-2 px-3 bg-green-8 text-lg hover:bg-green-6 transition-all"
                >Yes</button
            >
        </div>
    </div>
</div>

<script>
    let unsafeOuter = document.getElementById("unsafe-outer");
    let unsafeContainer = document.getElementById("unsafe-container");
    let unsafeNo = document.getElementById("unsafe-no");
    let unsafeYes = document.getElementById("unsafe-yes");

    let download = "#";

    const showUnsafe = async (url: string) => {
        if (!unsafeOuter) return;

        unsafeOuter.style.display = "flex";
        download = atob(url);
    };

    const hideUnsafe = async () => {
        if (!unsafeOuter) return;

        unsafeOuter.style.display = "none";
    };

    window.addEventListener("keydown", (ev) => {
        if (ev.code == "Escape") hideUnsafe();
    });

    const updateLinks = () => {
        unsafeOuter = document.getElementById("unsafe-outer");
        unsafeContainer = document.getElementById("unsafe-container");
        unsafeNo = document.getElementById("unsafe-no");
        unsafeYes = document.getElementById("unsafe-yes");

        unsafeNo?.addEventListener("click", hideUnsafe);

        unsafeYes?.addEventListener("click", () => {
            hideUnsafe();

            if (download == "" || download == "#") return;

            const a = document.createElement("a");

            a.href = download;
            a.download = download.split("/").pop()!;

            a.click();
        });

        unsafeOuter?.addEventListener("click", hideUnsafe);

        unsafeContainer?.addEventListener("click", (ev) => {
            ev.preventDefault();
            ev.stopPropagation();
        });

        const as = document.getElementsByTagName("a");

        const repo = (document.getElementById("__repo") as HTMLMetaElement)
            .content;

        const branch = (document.getElementById("__branch") as HTMLMetaElement)
            .content;

        for (const a of as) {
            if (a.href.includes("!!unsafe:")) {
                const url = `${repo}/raw/${branch}${a.href.split("!!unsafe:").pop()}`;
                const clone = a.cloneNode(true);

                a.parentNode!.replaceChild(clone, a);

                clone.addEventListener("click", (ev) => {
                    ev.preventDefault();
                    ev.stopPropagation();

                    showUnsafe(btoa(url));
                });
            } else if (a.href.includes("/files/")) {
                a.href = `${repo}/raw/${branch}/files/${a.href.split("/files/")[1]}`;
            }
        }
    };

    window.addEventListener("load", updateLinks);
    document.addEventListener("astro:page-load", updateLinks);
</script>
